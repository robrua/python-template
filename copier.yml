_subdirectory: template

project_type:
  type: str
  help: "What type of project do you want to create?"
  choices:
    Library: "library"
    CLI Tool: "cli"
    Application (includes CLI): "application"
  default: "library"

cli:
  when: false
  type: bool
  default: "{% if project_type in ('cli', 'application') %}yes{% else %}no{% endif %}"

application:
  when: false
  type: bool
  default: "{% if project_type == 'application' %}yes{% else %}no{% endif %}"

namespace_package:
  type: bool
  help: "Do you want to create a PEP 420 namespace package? Use this if you're creating one of many subpackages that share a top-level logical namespace (i.e., project.*)."
  default: no

human_readable_name:
  type: str
  help: 'What''s the human-readable name of the package? (e.g., "An Example Project")'

package_name:
  type: str
  help: "What's the canonical name of your package? (use kebab-case)"
  default: "{{ human_readable_name.lower().replace(' ', '-') }}"

directory:
  when: false
  type: str
  default: "{{ package_name }}"

module_name:
  type: str
  help: "What's the python name of your module? This is the one you use in import statements. If you're creating a PEP 420 namespace package, this should only be the top-level logical namespace, not the one unique to this package. (use snake_case)"
  default: "{{ package_name.replace('-', '_') }}"

submodule_name:
  when: "{{ namespace_package }}"
  type: str
  help: "What's the python name of your submodule? This should be unique to this package within your top-level logical namespace."
  default: "{{ package_name.replace('-', '_').removeprefix(module_name + '_') }}"

module_path:
  when: false
  type: str
  default: "{{ module_name }}{% if namespace_package %}/{{ submodule_name }}{% endif %}"

module:
  when: false
  type: str
  default: "{{ module_name }}{% if namespace_package %}.{{ submodule_name }}{% endif %}"

version:
  type: str
  help: "What should the initial version number be?"
  default: "0.1.0"

description:
  type: str
  help: "Provide a short description of the project. (for package metadata & the README.md)"
  default: ""

requires_python:
  when: false
  type: str
  default: ">=3.10"

author_name:
  type: str
  help: "What's the author's name?"
  default: ""

author_email:
  type: str
  help: "What's the author's email address?"
  default: ""

repository_base:
  when: false
  type: str
  default: ""

repository:
  type: str
  help: "Where will the project's repository be?"
  default: "{% if repository_base %}{{ repository_base }}/{% if namespace_package %}{{ module_name.replace('_', '-') }}/{% endif %}{{ directory }}{% endif %}"

homepage_base:
  when: false
  type: str
  default: ""

homepage:
  type: str
  help: "Where will the project's homepage be?"
  default: "{% if homepage_base %}{{ homepage_base }}/{{ package_name }}{% else %}{{ repository }}{% endif %}"

documentation_base:
  when: false
  type: str
  default: ""

documentation:
  type: str
  help: "Where will the project's documentation be?"
  default: "{% if documentation_base %}{{ documentation_base }}/{{ package_name }}{% else %}{{ homepage }}{% endif %}"

license:
  type: str
  help: "What license do you want to use? Visit https://choosealicense.com if you want more information."
  choices:
    MIT License: mit
    Apache Software License 2.0: apache
    BSD 3-Clause License: bsd
    GNU LGPL v3.0: lgpl
    GNU GPL v3.0: gpl
    None: none
  default: mit

license_identifier:
  when: false
  type: str
  default: "{% if license == 'mit' %}MIT{% elif license == 'apache' %}Apache-2.0{% elif license == 'bsd' %}BSD-3-Clause{% elif license == 'lgpl' %}LGPL-3.0-or-later{% elif license == 'gpl' %}GPL-3.0-or-later{% endif %}"

license_files:
  when: false
  type: str
  default: '{% if license in ("mit", "apache", "bsd") %}"LICENSE.txt"{% elif license == "lgpl" %}"COPYING", "COPYING.LESSER"{% elif license == "gpl" %}"COPYING"{% endif %}'

cli_command:
  when: "{{ cli }}"
  type: str
  help: "What should the CLI command for the application be? (use kebab-case)"
  default: "{{ package_name }}"

cli_function:
  when: false
  type: str
  default: "{{ cli_command.replace('-', '_') }}"
